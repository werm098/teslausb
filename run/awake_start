#!/bin/bash -eu

if [[ ( ( ! -x /root/bin/tesla_api.py) || ( ! -s /mutable/cache.json ) ) && ( -z "${TESLAFI_API_TOKEN:+x}" ) && ( -z "${TESSIE_API_TOKEN:+x}" ) ]]
then
  log "Not keeping car awake."
  exit
fi

function ping {
  while true
  do
    if [[ ( -n "${TESLA_REFRESH_TOKEN:+x}" ) ]]
    # Use Tesla API to keep car awake
    then
      if timeout 10 /root/bin/tesla_api.py streaming_ping
      then
        sleep 90
      else
        log "Failed to contact car using Tesla API, retrying in 5s..."
        sleep 5
      fi
    fi

    if [[ ( -n "${TESLAFI_API_TOKEN:+x}" ) ]]
    # Use TeslaFi API to keep car awake.
    then
      curl -s -H "Authorization: Bearer $TESLAFI_API_TOKEN" "https://www.teslafi.com/feed.php?command=wake_up"
      # No need to contact TeslaFi too often to prevent API lockout (max 3 calls/min).
      sleep 600
    fi

    if [[ -n "${TESSIE_API_TOKEN:+x}" ]]
    # Use Tessie API to keep car awake
    then
        http_response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer $TESSIE_API_TOKEN" \
            -H "Accept: application/json" \
            -H "User-Agent: github.com/marcone/teslausb" \
            "https://api.tessie.com/$TESSIE_VIN/wake")
        
        # Extract HTTP status code
        http_status="${http_response: -3}"
        
        # Extract response body (excluding status code)
        response_body="${http_response:0:${#http_response}-3}"
        
        # Check if HTTP status code is not 200 (OK)
        if [ "$http_status" != "200" ]
        then
            # Log an error
            log "Failed to wake car with Tessie API. Check your TESSIE_API_TOKEN and TESSIE_VIN are set correctly. If they are, your car may not have a good connection. Retrying in 1 minute..."
            sleep 60
        else
            # Check if the response is in JSON format
            if ! jq -e . >/dev/null 2>&1 <<<"$response_body"
            then
                log "Failed to wake car with Tessie API. Retrying in 1 minute. Response data: $response_body"
                sleep 60
            else
                # Parse JSON and check if "result" is true
                result=$(jq -r '.result' <<<"$response_body")
                if [[ "$result" != "true" ]]
                then
                    log "Failed to wake car with Tessie API. Retrying in 1 minute. Response data: $response_body"
                    sleep 60
                else
                    # Sleep for 5 minutes on successful wake-up call
                    sleep 300
                fi
            fi
        fi
    fi
  done
}

case "${TESLA_WAKE_MODE:-stream}" in
  sentry)
    is_sentry_mode_enabled=$(/root/bin/tesla_api.py is_sentry_mode_enabled | tr '[:upper:]' '[:lower:]')
    if [ "false" = "${is_sentry_mode_enabled}" ]
    then
      log "Temporarily enabling Sentry Mode to keep car awake."
      touch /tmp/disable_sentry_after_archiving
      /root/bin/tesla_api.py enable_sentry_mode &>> "${LOG_FILE}"
    fi
    ;;
  stream)
    log "Starting background task to keep car awake."
    ping &
    echo $! > /tmp/keep_awake_task_pid
    ;;
  *)
    log "Unknown TESLA_WAKE_MODE: ${TESLA_WAKE_MODE}."
    ;;
esac
